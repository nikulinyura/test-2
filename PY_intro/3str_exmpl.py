'''
СТРОКИ - класс ПОСЛЕДОВАТЕЛЬНОСТЬ

последовательности символов

упорядоченные 

!!! неизменяемые

поддерживают операции выражений
строковые методы
поддердивают операции:
    - индексация
    - срез
    - конкантенации


'''
# paste print
S = '' # пустая строка
S = "spam's"

print('s\np\ta\x00m') # Экранирование последовательности
r'\temp\spam' # неформатированные строки
'abc' + 'def' # конкантинация
'abc'* 3 # повторение

S[1] # обращение к индексу
S[1:3] # срезы
S[-2]
S[::-1] # в обратном порядке


len('abc') # длина строки

print("a %s parrot %s" % (S, 'asa')) # выражение форматирования
print("a {0} parrot {1}".format(S, 'asa')) # тоже самое
print("%(n)d %(x)s" % {"n":1, "x":"spam"}) # форматирование из словаря

S.find('am') # поиск индекса
print(S.rstrip()) # удаление пробелов начала и конца

print(S.replace('pa', 'PA')) # замена - создает новую строку

print(S.split()) # разделение строки по символу
line = 'bob,haker,40'
cols = line.split(',')
print (cols)

S.isdigit() # проверка содержимого строки

S.lower() #преобразование в нижний регистр
S.endswith('s') #  проверка окончания

# print('spam'.join(strlist)) # сборка строки из списка

for x in S: print (x)

'spa' in  S

print([c*2 for c in S])

a = "хуй"
for i in a: print(ord(i), end=' ') # ord 
print()
S.capitalize()
L = list(S) # создание списка из строки

S = '-'.join(L) # собирает список в строку с разделителем или без
print(L, S)


